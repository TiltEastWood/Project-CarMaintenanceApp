@page "/login"
@using System.ComponentModel.DataAnnotations
@using CarMaintenanceApp.Services
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using CarMaintenanceApp.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.Cookies
@inject NavigationManager Navigation
@inject AuthServices AuthServices
@inject ILogger<Login> Logger

<h3>Login</h3>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 boarder">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="loginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-collumn">
                <h3>LOGIN</h3>
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="Model.Username" class="form-control" placeholder="Username" />
                <ValidationMessage For="@(() => Model.Username)" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" type="password" placeholder="Password" />
                <ValidationMessage For="@(() => Model.Password)" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var user = await AuthServices.AuthenticateUserAsync(Model.Username, Model.Password);
        if (user == null)
        {
            errorMessage = "Invalid Username or Password";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.Username),
            new Claim(ClaimTypes.Sid, user.Id.ToString()),
            new Claim("FirstName", user.FirstName)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        Navigation.NavigateTo("/", true);
    }
}
